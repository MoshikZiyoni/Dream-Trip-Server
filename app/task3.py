# my_list = [
# "London, United Kingdom",
# "New York City, United States",
# "Paris, France",
# "Tokyo, Japan",
# "Sydney, Australia",
# "Rome, Italy",
# "Berlin, Germany",
# "Moscow, Russia",
# "Beijing, China",
# "Toronto, Canada",
# "Madrid, Spain",
# "Cairo, Egypt",
# "Istanbul, Turkey",
# "Rio de Janeiro, Brazil",
# "Cape Town, South Africa",
# "Mumbai, India",
# "Buenos Aires, Argentina",
# "Dubai, United Arab Emirates",
# "Seoul, South Korea",
# "Athens, Greece",
# "Amsterdam, Netherlands",
# "Prague, Czech Republic",
# "Vienna, Austria",
# "Helsinki, Finland",
# "Bangkok, Thailand",
# "Singapore, Singapore",
# "Stockholm, Sweden",
# "Copenhagen, Denmark",
# "Budapest, Hungary",
# "Dublin, Ireland",
# "Warsaw, Poland",
# "Lisbon, Portugal",
# "Oslo, Norway",
# "Reykjavik, Iceland",
# "Brasília, Brazil",
# "Mexico City, Mexico",
# "Santiago, Chile",
# "Bogota, Colombia",
# "Lima, Peru",
# "Caracas, Venezuela",
# "Johannesburg, South Africa",
# "Nairobi, Kenya",
# "Casablanca, Morocco",
# "Beirut, Lebanon",
# "New Delhi, India",
# "Hanoi, Vietnam",
# "Manila, Philippines",
# "Jakarta, Indonesia",
# "Kuala Lumpur, Malaysia",
# "Wellington, New Zealand",
# "San Francisco, United States",
# "Los Angeles, United States",
# "Chicago, United States",
# "Miami, United States",
# "Boston, United States",
# "Seattle, United States",
# "Las Vegas, United States",
# # "Washington, D.C., United States",
# "San Diego, United States",
# "Houston, United States",
# "Dallas, United States",
# "Atlanta, United States",
# "Denver, United States",
# "Phoenix, United States",
# "Portland, United States",
# "Philadelphia, United States",
# "Vancouver, Canada",
# "Montreal, Canada",
# "Calgary, Canada",
# "Ottawa, Canada",
# "Edmonton, Canada",
# "Quebec City, Canada",
# "Sydney, Canada",
# "Melbourne, Australia",
# "Brisbane, Australia",
# "Perth, Australia",
# "Adelaide, Australia",
# "Auckland, New Zealand",
# "Christchurch, New Zealand",
# "Wellington, New Zealand",
# "Mumbai, India",
# "Delhi, India",
# "Bangalore, India",
# "Chennai, India",
# "Kolkata, India",
# "Hyderabad, India",
# "Ahmedabad, India",

# "Pune, India",
# "Jaipur, India",
# "Tokyo, Japan",
# "Yokohama, Japan",
# "Osaka, Japan",
# "Nagoya, Japan",
# "Sapporo, Japan",
# "Fukuoka, Japan",
# "Kyoto, Japan",
# "Hiroshima, Japan",
# "Barcelona, Spain",
# "Valencia, Spain",
# "Seville, Spain",
# "Malaga, Spain",
# "Bilbao, Spain",
# "Granada, Spain",
# "Alicante, Spain",
# "Zaragoza, Spain",


# "Milan, Italy",
# "Naples, Italy",
# "Turin, Italy",
# "Florence, Italy",
# "Venice, Italy",
# "Bologna, Italy",
# "Genoa, Italy",
# "Marseille, France",
# "Lyon, France",
# "Toulouse, France",
# "Nantes, France",
# "Strasbourg, France",
# "Bordeaux, France",
# "Berlin, Germany",
# "Hamburg, Germany",
# "Munich, Germany",

# "Cologne, Germany",
# "Frankfurt, Germany",
# "Stuttgart, Germany",
# "Düsseldorf, Germany",
# "Leipzig, Germany",
# "Vienna, Austria",
# "Graz, Austria",
# "Linz, Austria",
# "Salzburg, Austria",
# "Innsbruck, Austria",
# "Klagenfurt, Austria",
# "Geneva, Switzerland",
# "Zurich, Switzerland",
# "Basel, Switzerland",
# "Lausanne, Switzerland",
# "Bern, Switzerland",
# "Lucerne, Switzerland",
# "St. Gallen, Switzerland",
# "Moscow, Russia",
# "Saint Petersburg, Russia",
# "Novosibirsk, Russia",
# "Yekaterinburg, Russia",
# "Nizhny Novgorod, Russia",
# "Kazan, Russia",
# "Chelyabinsk, Russia",
# "Samara, Russia",
# "Istanbul, Turkey",
# "Ankara, Turkey",
# "Izmir, Turkey",
# "Bursa, Turkey",
# "Adana, Turkey",
# "Gaziantep, Turkey",
# "Konya, Turkey",
# "Antalya, Turkey",
# "Beijing, China",
# "Shanghai, China",
# "Guangzhou, China",
# "Shenzhen, China",
# "Chengdu, China",
# "Hangzhou, China",
# "Wuhan, China",
# "Tianjin, China",
# "Seoul, South Korea",
# "Busan, South Korea",
# "Incheon, South Korea",
# "Daegu, South Korea",
# "Daejeon, South Korea",
# "Gwangju, South Korea",
# "Ulsan, South Korea",
# "Athens, Greece",
# "Thessaloniki, Greece",
# "Patras, Greece",
# "Heraklion, Greece",
# "Larissa, Greece",
# "Ioannina, Greece",
# "Volos, Greece",
# "Amsterdam, Netherlands",
# "Rotterdam, Netherlands",
# "The Hague, Netherlands",
# "Utrecht, Netherlands",
# "Eindhoven, Netherlands",
# "Tilburg, Netherlands",
# "Groningen, Netherlands",
# "Prague, Czech Republic",
# "Brno, Czech Republic",
# "Ostrava, Czech Republic",
# "Plzen, Czech Republic",
# "Olomouc, Czech Republic",
# "Liberec, Czech Republic",
# "Hradec Kralove, Czech Republic",
# "Vienna, Austria",
# "Graz, Austria",
# "Linz, Austria",
# "Salzburg, Austria",
# "Innsbruck, Austria",
# "Klagenfurt, Austria",
# "Helsinki, Finland",
# "Espoo, Finland",
# "Tampere, Finland",
# "Vantaa, Finland",
# "Turku, Finland",
# "Oulu, Finland",
# "Lahti, Finland",
# "Bangkok, Thailand",
# "Phuket, Thailand",
# "Chiang Mai, Thailand",
# "Pattaya, Thailand",
# "Krabi, Thailand",
# "Ayutthaya, Thailand",
# "Samui, Thailand",
# "Singapore, Singapore",
# "Stockholm, Sweden",
# "Gothenburg, Sweden",
# "Malmo, Sweden",
# "Uppsala, Sweden",
# "Vasteras, Sweden",
# "Orebro, Sweden",
# "Linkoping, Sweden",
# "Copenhagen, Denmark",
# "Aarhus, Denmark",
# "Odense, Denmark",
# "Aalborg, Denmark",
# "Esbjerg, Denmark",
# "Randers, Denmark",
# "Kolding, Denmark",
# "Budapest, Hungary",
# "Debrecen, Hungary",
# "Szeged, Hungary",
# "Miskolc, Hungary",
# "Pecs, Hungary",
# "Gyor, Hungary",
# "Nyiregyhaza, Hungary",
# "Dublin, Ireland",
# "Cork, Ireland",
# "Limerick, Ireland",
# "Galway, Ireland",
# "Waterford, Ireland",
# "Belfast, United Kingdom",
# "Manchester, United Kingdom",
# "Birmingham, United Kingdom",
# "Glasgow, United Kingdom",
# "Edinburgh, United Kingdom",
#     "Liverpool, United Kingdom",
#     "Leeds, United Kingdom",
#     "Warsaw, Poland",
#     "Krakow, Poland",
#     "Lodz, Poland",
#     "Wroclaw, Poland",
#     "Poznan, Poland",
#     "Gdansk, Poland",
#     "Szczecin, Poland",
#     "Lisbon, Portugal",
#     "Porto, Portugal",
#     "Vila Nova de Gaia, Portugal",
#     "Amadora, Portugal",
#     "Braga, Portugal",
#     "Coimbra, Portugal",
#     "Funchal, Portugal",
#     "Oslo, Norway",
#     "Bergen, Norway",
#     "Stavanger, Norway",
#     "Trondheim, Norway",
#     "Drammen, Norway",
#     "Fredrikstad, Norway",
#     "Sandnes, Norway",
#     "Reykjavik, Iceland",
#     "Brasília, Brazil",
#     "Rio de Janeiro, Brazil",
#     "São Paulo, Brazil",
#     "Salvador, Brazil",
#     "Fortaleza, Brazil",
#     "Belo Horizonte, Brazil",
#     "Manaus, Brazil",
#     "Recife, Brazil",
#     "Mexico City, Mexico",
#     "Guadalajara, Mexico",
#     "Monterrey, Mexico",
#     "Puebla City, Mexico",
#     "Tijuana, Mexico",
#     "Ciudad Juarez, Mexico",
#     "Leon, Mexico",
#     "Santiago, Chile",
#     "Valparaiso, Chile",
#     "Concepcion, Chile",
#     "Antofagasta, Chile",
#     "Vina del Mar, Chile",
#     "Temuco, Chile",
#     "Rancagua, Chile",
#     "Bogota, Colombia",
#     "Medellin, Colombia",
#     "Cali, Colombia",
#     "Barranquilla, Colombia",
#     "Cartagena, Colombia",
#     "Cucuta, Colombia",
#     "Bucaramanga, Colombia",
#     "Lima, Peru",
#     "Arequipa, Peru",
#     "Trujillo, Peru",
#     "Chiclayo, Peru",
#     "Piura, Peru",
#     "Cusco, Peru",
#     "Chimbote, Peru",
#     "Caracas, Venezuela",
#     "Maracaibo, Venezuela",
#     "Valencia, Venezuela",
#     "Barquisimeto, Venezuela",
#     "Maracay, Venezuela",
#     "Ciudad Guayana, Venezuela",
#     "Nairobi, Kenya",
#     "Mombasa, Kenya",
#     "Kisumu, Kenya",
#     "Nakuru, Kenya",
#     "Eldoret, Kenya",
#     "Nyeri, Kenya",
#     "Casablanca, Morocco",
#     "Rabat, Morocco",
#     "Marrakech, Morocco",
#     "Fes, Morocco",
#     "Tangier, Morocco",
#     "Agadir, Morocco",
#     "Beirut, Lebanon",
#     "Tripoli, Lebanon",
#     "Sidon, Lebanon",
#     "Tyre, Lebanon",
#     "Zahle, Lebanon",
#     "New Delhi, India",
#     "Mumbai, India",
#     "Kolkata, India",
#     "Chennai, India",
#     "Bangalore, India",
#     "Hyderabad, India",
#     "Ahmedabad, India",
#     "Pune, India",
#     "Jaipur, India",
#     "Hanoi, Vietnam",
#     "Ho Chi Minh City, Vietnam",
#     "Da Nang, Vietnam",
#     "Haiphong, Vietnam",
#     "Nha Trang, Vietnam",
#     "Can Tho, Vietnam",
#     "Manila, Philippines",
#     "Quezon City, Philippines",
#     "Caloocan, Philippines",
#     "Davao City, Philippines",
#     "Cebu City, Philippines",
#     "Zamboanga City, Philippines",
#     "Jakarta, Indonesia",
#     "Surabaya, Indonesia",
#     "Bandung, Indonesia",
#     "Medan, Indonesia",
#     "Semarang, Indonesia",
#     "Palembang, Indonesia",
#     "Kuala Lumpur, Malaysia",
#     "George Town, Malaysia",
#     "Ipoh, Malaysia",
#     "Shah Alam, Malaysia",
#     "Petaling Jaya, Malaysia",
#     "Malacca City, Malaysia",
#     "Wellington, New Zealand",
#     "Auckland, New Zealand",
#     "Christchurch, New Zealand",
#     "Hamilton, New Zealand",
#     "Tauranga, New Zealand",
#     "Napier, New Zealand",
#     "Dunedin, New Zealand",
#     "San Francisco, United States",
#     "Los Angeles, United States",
#     "Chicago, United States",
#     "Miami, United States",
#     "Boston, United States",
#     "Seattle, United States",
#     "Las Vegas, United States",
#     # "Washington, D.C., United States",
#     "San Diego, United States",
#     "Houston, United States",
#     "Dallas, United States",
#     "Atlanta, United States",
#     "Denver, United States",
#     "Phoenix, United States",
#     "Portland, United States",
#     "Philadelphia, United States",
#     "Vancouver, Canada",
#     "Montreal, Canada",
#     "Calgary, Canada",
#     "Ottawa, Canada",
#     "Edmonton, Canada",
#     "Quebec City, Canada",
#     "Sydney, Canada",
#     "Melbourne, Australia",
#     "Brisbane, Australia",
#     "Perth, Australia",
#     "Adelaide, Australia",
#     "Auckland, New Zealand",
#     "Christchurch, New Zealand",
#     "Wellington, New Zealand",
#     "Christchurch, New Zealand"
# ]
# geolocator = Nominatim(user_agent="dream-trip")

# for item in my_list:
#     city, country = item.split(", ")
#     # print(city)
#     existing_country = Country.objects.filter(name=country).first()
#     country_id=existing_country.id
#     wiki=process_query(city)
#     location = geolocator.geocode(f"{city_name},{country}")
#     landmarks = [location.latitude, location.longitude]
#     city_query = City(country_id=country_id, city=city, latitude=landmarks[0], longitude=landmarks[1], description=wiki[0])
#     city_query.save()
import json
import requests
from urllib.parse import quote
from geopy.geocoders import Nominatim
from dotenv import load_dotenv
import os
import time
load_dotenv()
api_key=os.environ.get('FOURSQUARE')

def foursquare_attraction(landmarks):
    url1 = "https://api.foursquare.com/v3/places/search?"

    headers = {
        "accept": "application/json",
        "Authorization": api_key
    }

    query1= {
        'query': 'attractions in Paris, France',
        'categories':'10027,10025,10055,10068,16000',
        "ll" :  f"{48.8566},{2.3522}",
        'radius':5000,
        'limit' : 6,
        'fields':'distance,geocodes,name,fsq_id,rating,price,website,distance,description,social_media,photos,menu,hours_popular'

    }
    response1 = requests.get(url1, params=query1,headers=headers)

    response_text1=(response1.text)
    jsonto1=json.loads(response_text1)
    reslut=jsonto1['results']
    return(reslut)


import flickrapi

def flickr_api(name,latitude,longitude):
  time.sleep(1.5)
  api_key =os.environ.get('flickr_key')
  api_secret =os.environ.get('flickr_secret')
  image_list = []
  flickr = flickrapi.FlickrAPI(api_key, api_secret, format='parsed-json')
  # Search for photos by tags (landmark name)
  photos = flickr.photos.search(text=name, per_page=1, extras='url_o',sort='relevance')
  if len(photos['photos']['photo']) == 0:
    # No photos found for the attraction name, search by latitude and longitude
    photos = flickr.photos.search(lat=latitude, lon=longitude, per_page=1, extras='url_o', sort='relevance')

    if len(photos['photos']['photo']) == 0:
        print('No photos found for the attraction')
  # Extract the photo URLs
  if 'photos' in photos and 'photo' in photos['photos']:
      for photo in photos['photos']['photo']:
          photo_id = photo['id']  # URL of the original-sized photo
          flickr = flickrapi.FlickrAPI(api_key, api_secret, format='parsed-json')
          # Get the sizes of the photo
          sizes = flickr.photos.getSizes(photo_id=photo_id)
          # Extract the URL of the image
          if 'sizes' in sizes and 'size' in sizes['sizes']:
              # Assuming you want the URL of the largest available size
              largest_size = sizes['sizes']['size'][-1]
              image_url = largest_size['source']
              return image_url
            #   image_list.append(image_url)
          else:
              return (image_url=="")
print(flickr_api(name='Parque Fluvial Vallarta,Puerto Vallarta,mexico',latitude=20.641047,longitude=-105.22765))

